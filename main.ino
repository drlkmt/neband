#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Fonts/FreeSerif9pt7b.h>
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

#define CALIBRATELOOPCX 10
#define STEPIS 26
#define STEPISNOT 29
#define STEPISH 7
const int adxl345 = 0x53; // I2C адрес ADXL345

static const PROGMEM uint8_t neband[1024] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x41, 0x04, 0x10, 0x41, 0x04, 0x10, 0x41, 0x04, 0x10, 0x41, 0x04, 0x10, 0x41, 0x04, 0x10, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x04, 0x00, 0x42, 0x21, 0x08, 0x42, 0x21, 0x08, 0x42, 0x21, 0x08, 0x42, 0x21, 0x08, 0x42, 0x20, 
    0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 
    0xff, 0x00, 0x0f, 0xfc, 0x01, 0x00, 0xff, 0xff, 0x00, 0x00, 0x10, 0x08, 0x00, 0x10, 0x08, 0xfc, 
    0x1f, 0x80, 0x03, 0xe0, 0x20, 0x08, 0x3f, 0xff, 0x91, 0x04, 0x40, 0x80, 0x10, 0x80, 0x80, 0x1c, 
    0x0f, 0x80, 0x00, 0xc0, 0x00, 0x00, 0x1e, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x1c, 
    0x0f, 0xc0, 0x00, 0xc0, 0x00, 0x00, 0x1e, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
    0x0f, 0xe0, 0x80, 0xc0, 0x00, 0x00, 0x1e, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 
    0x0d, 0xe0, 0x00, 0xc0, 0x00, 0x00, 0x1e, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 
    0x0c, 0xf8, 0x00, 0xc0, 0x04, 0x41, 0x1e, 0x01, 0xe0, 0x10, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1c, 
    0x0c, 0xf8, 0x00, 0xc0, 0x20, 0x00, 0x1c, 0x01, 0xc0, 0x00, 0x00, 0x11, 0x00, 0x02, 0x10, 0x1c, 
    0x0c, 0x3c, 0x04, 0xc0, 0x0f, 0xe0, 0x1e, 0x0b, 0x80, 0x3f, 0x82, 0x6c, 0xfe, 0x10, 0x0f, 0xfc, 
    0x0c, 0x3e, 0x00, 0xc0, 0x38, 0xf0, 0x1e, 0x03, 0x80, 0xe3, 0xe1, 0xfd, 0xff, 0x00, 0x70, 0xfc, 
    0x0c, 0x1e, 0x00, 0xc0, 0x70, 0x38, 0x1c, 0x1e, 0x01, 0x80, 0xe0, 0x3a, 0x1f, 0x80, 0xc0, 0x3c, 
    0x0c, 0x0f, 0x00, 0xc0, 0xe0, 0x3c, 0x1f, 0xfc, 0x01, 0x80, 0xf0, 0x3e, 0x07, 0x81, 0x80, 0x1c, 
    0x0c, 0x0f, 0x90, 0xc1, 0xe0, 0x1c, 0x1f, 0xff, 0x81, 0x80, 0xf0, 0x3c, 0x03, 0x83, 0x80, 0x1c, 
    0x0c, 0x07, 0xc0, 0xc1, 0xe0, 0x3c, 0x1e, 0x0f, 0xe0, 0x00, 0x70, 0x38, 0x03, 0x83, 0x80, 0x1c, 
    0x0c, 0x03, 0xe0, 0xc1, 0xc0, 0x1e, 0x1c, 0x01, 0xe0, 0x07, 0xe0, 0x3c, 0x03, 0x87, 0x80, 0x1c, 
    0x0c, 0x01, 0xe0, 0xc1, 0xe0, 0x1c, 0x1e, 0x01, 0xe0, 0x7d, 0x70, 0x38, 0x03, 0x83, 0x80, 0x1c, 
    0x0c, 0x00, 0xf8, 0xc1, 0xff, 0xf8, 0x1e, 0x00, 0xf1, 0xe0, 0xf0, 0x3c, 0x03, 0xc7, 0x00, 0x5c, 
    0x0c, 0x00, 0xf8, 0xc1, 0xc0, 0x00, 0x1c, 0x00, 0xf1, 0xc0, 0x70, 0x38, 0x03, 0x87, 0x81, 0x1c, 
    0x0c, 0x00, 0x7c, 0xc1, 0xe0, 0x00, 0x1e, 0x01, 0xe3, 0x80, 0xf0, 0x38, 0x03, 0x83, 0x80, 0x1c, 
    0x0c, 0x00, 0x3e, 0xc1, 0xe0, 0x00, 0x1e, 0x01, 0xf3, 0xc0, 0x70, 0x3c, 0x03, 0x87, 0xc0, 0x3c, 
    0x0c, 0x00, 0x1e, 0xc0, 0xe0, 0x00, 0x9c, 0x01, 0xe3, 0x80, 0xf0, 0x38, 0x03, 0xc3, 0xc0, 0x3c, 
    0x0c, 0x00, 0x0f, 0xc0, 0xf0, 0x04, 0x1e, 0x03, 0xc3, 0xc1, 0xf0, 0x3c, 0x03, 0x83, 0xe0, 0x7c, 
    0x0c, 0x00, 0x07, 0xc0, 0x70, 0x1c, 0x1e, 0x1f, 0x81, 0xe7, 0x70, 0x38, 0x0b, 0x81, 0xf1, 0xdc, 
    0x1e, 0x00, 0x07, 0xc0, 0x3e, 0x30, 0x3f, 0xff, 0x01, 0xfc, 0xf0, 0x3c, 0x03, 0xc0, 0x7f, 0x1e, 
    0x7f, 0x80, 0x03, 0xc0, 0x1f, 0xe0, 0x3f, 0xf8, 0x00, 0xf8, 0x7f, 0xff, 0x83, 0xf0, 0x5e, 0x1f, 
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
    0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 
    0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x40, 0x00, 0x00, 0x80, 0x00, 0x20, 0x00, 0x20, 0x00, 0x40, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x80, 0x02, 0x00, 0x01, 0x02, 0x00, 0x40, 0x40, 0x00, 0x04, 
    0x00, 0x00, 0x40, 0x88, 0x00, 0x10, 0x00, 0x88, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 
    0x04, 0x00, 0x00, 0x00, 0x20, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x10, 0x01, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x10, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 
    0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x04, 
    0x00, 0x41, 0x00, 0x00, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 
    0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x10
};

static const PROGMEM uint8_t ricardo[1024] = {
    0xff, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfe, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xfe, 0x00, 0x00, 0x00, 0x80, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 
    0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xcc, 0x7f, 0x0f, 
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xde, 0xfb, 0x9f, 0x03, 0xc1, 0xf9, 0xce, 0x83, 0x27, 
    0xfe, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xde, 0xfb, 0x9f, 0x7f, 0x9c, 0xf9, 0xa6, 0xff, 0x77, 
    0xfe, 0x00, 0x09, 0x00, 0x00, 0x01, 0xff, 0xde, 0xfb, 0x8f, 0x7f, 0xbe, 0x78, 0xb6, 0xfe, 0x73, 
    0xff, 0x03, 0xfb, 0xc0, 0x00, 0x01, 0xff, 0xde, 0xfb, 0xaf, 0x7f, 0x3f, 0x3a, 0x36, 0x02, 0x7b, 
    0xfe, 0x0f, 0xff, 0xff, 0xc0, 0x01, 0xff, 0xde, 0xfb, 0x27, 0x7f, 0x7f, 0xbb, 0x76, 0x7e, 0x7b, 
    0xff, 0x03, 0xfe, 0x07, 0xc0, 0x00, 0xff, 0xde, 0xfb, 0x77, 0x7f, 0x7f, 0xb7, 0xf7, 0x7e, 0xf3, 
    0xff, 0x00, 0xf8, 0x39, 0xe0, 0x00, 0xff, 0xde, 0xfb, 0x07, 0x7f, 0x7f, 0xb7, 0xf7, 0x7e, 0x87, 
    0xff, 0x00, 0x7c, 0x1f, 0xf8, 0x00, 0xff, 0xde, 0xfb, 0x73, 0x7f, 0x3f, 0xb7, 0xf7, 0x46, 0xff, 
    0xff, 0x00, 0x7c, 0x03, 0xf8, 0x00, 0xff, 0xc0, 0x03, 0x7b, 0x7f, 0x9f, 0x27, 0xff, 0x3e, 0xff, 
    0xff, 0x00, 0x3c, 0xc3, 0xf8, 0x01, 0xff, 0xff, 0xff, 0x7b, 0x7f, 0xc0, 0x6f, 0xff, 0xfe, 0xff, 
    0xff, 0x80, 0x3c, 0x7f, 0xf0, 0x41, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
    0xff, 0x81, 0x3e, 0x1f, 0xe0, 0x51, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 
    0xff, 0x00, 0x3f, 0x1f, 0xe0, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0x7f, 0xff, 0xe0, 0x79, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0x7f, 0xff, 0xf0, 0x71, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 
    0xff, 0x88, 0x7f, 0xff, 0xf0, 0x70, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xff, 
    0xff, 0x88, 0x7f, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0x80, 0xff, 0xff, 0xe0, 0x00, 0x1f, 0xff, 0xf8, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x05, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x3f, 0xfe, 0x00, 
    0xff, 0xc0, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x01, 0xff, 
    0xff, 0xc0, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xe0, 0x1f, 0xf1, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xe0, 0x3f, 0xc1, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xe0, 0x0b, 0xde, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0x3f, 0xfc, 0x00, 0x40, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf8, 0x3f, 0xf8, 0x00, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xf8, 0x3f, 0xf0, 0x00, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x3f, 0xf0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x7c, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x37, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x03, 0xbf, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x20, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x78, 0x00, 0x07, 0xff, 0xff, 0xfa, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x01, 0xff, 0xff, 0xfa, 0x0f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x00, 0x00, 0x3e, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x01, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0x1f, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff
};

int x,y,z,xavg=0,yavg=0,zavg=0, steps=0, vector,vectorb;
bool flag = 0;
byte xyz[6];
byte c;
int i, j;
void setup() {
  Serial.begin(9600);
  Wire.begin();

  pinMode(3, INPUT_PULLUP);
  attachInterrupt(1, btnIsr, FALLING);
  
  // запишем адрес регистра DEVID
  Wire.beginTransmission(adxl345);
  Wire.write(byte(0x00));
  Wire.endTransmission();
    
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println("SSD1306 allocation failed");
    for(;;);
  }
  display.setFont(&FreeSerif9pt7b);
  display.setTextSize(1);             
  display.setTextColor(WHITE); 
  display.clearDisplay();
  //display.drawBitmap(0, 0, ricardo, 128, 64, 1);
  display.drawBitmap(0, 0, neband, 128, 64, 1);    //раскоментируй что то одно. Превьюшка
  display.display();

  // переведём акселерометр в режим измерений
  Wire.beginTransmission(adxl345);
  Wire.write(byte(0x2D));
  Wire.write(byte(0x08));
  Wire.endTransmission();
  calibrate();
  delay(5000);
}

void btnIsr() {
  steps = 0;
}

void loop() {
  // запишем адрес начала данных по осям X, Y и Z:
  Wire.beginTransmission(adxl345);
  Wire.write(byte(0x32));
  Wire.endTransmission();

  // прочитаем 6 байтов значений XYZ:
  i = 0;
  xyz[6];
  Wire.requestFrom(adxl345, 6);
  while (Wire.available()) {
    c = Wire.read();
    xyz[i] = c;
    i++;
  }
  // посчитаем и отобразим значения X, Y, Z:
  x = word(xyz[1], xyz[0]) - xavg;
  y = word(xyz[3], xyz[2]) - yavg;
  z = word(xyz[5], xyz[4]) - zavg;

  //vector = sqrt(x * x + y * y + z * z); //агрессия подсчета шагов, лучше с y, которая ниже
  vector = sqrt(y * y);
  vectorb = (vector + vectorb) / 2;
    if (vectorb < STEPIS && flag == 0)
    {
      steps = steps + 1;
      flag = 1;
    }
    else if (vectorb >= STEPIS && vectorb <= STEPIS - STEPISH && flag == 1)
    {
      // Don't Count
    }
    if (vectorb > STEPISNOT && flag == 1)
    {
      flag = 0;
    }
  /*Serial.print(STEPIS);
  Serial.print(",");
  Serial.print(STEPIS - STEPISH);
  Serial.print(",");
  Serial.print(STEPISNOT);
  Serial.print(",");
  Serial.println(vectorb); */
  display.clearDisplay();
  display.setCursor(0,15);
  display.println("-=NeBand!=-");   
  display.println("Your steps");      
  display.println(steps);
  display.display();
  //delay(100);
  calibrate();
}

void calibrate()
{
  Wire.beginTransmission(adxl345);
  Wire.write(byte(0x32));
  Wire.endTransmission();

  // прочитаем 6 байтов значений XYZ:
  i = 0;
  xyz[6];
  Wire.requestFrom(adxl345, 6);
  while (Wire.available()) {
    c = Wire.read();
    xyz[i] = c;
    i++;
  }
  for(i = 0; i < CALIBRATELOOPCX; i++)
  {

    xavg += word(xyz[1], xyz[0]);
    yavg += word(xyz[3], xyz[2]);
    zavg += word(xyz[5], xyz[4]);
    
  }
    xavg /= CALIBRATELOOPCX;
    yavg /= CALIBRATELOOPCX;
    zavg /= CALIBRATELOOPCX;
}
